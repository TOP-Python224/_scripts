@startuml

hide enum empty members

enum Gender {
    MALE
    FEMALE
}
enum EducationForm {
    INTRAMURAL
    EXTRAMURAL
    REMOTE
}
enum Contract {
    BUDGET
    COMPANY
    PERSONAL
}
enum Degree {
    BACHELOR
    SPECIALIST
    MASTER
    CANDIDATE
    DOCTOR
}


class Contact {
    +mobile: str = None
    +email: str = None
    +office: str = None
    +home: str = None
    +telegram: str = None
    +icq: str = None
    +validate_mobile(): bool
    +validate_email(): bool
    +validate_office(): bool
    +validate_home(): bool
    +validate_validate_telegram(): bool
    +validate_icq(): bool
}
Contact --o Person
Contact --o OrganizationLevel


abstract class OrganizationLevel {
    +name: str
    +employees: list[Employee]
    +head: Administrator
    +contact: Contact
    #budget: Decimal
}
OrganizationLevel <|-- University
OrganizationLevel <|-- Institute
OrganizationLevel <|-- Dormitory
OrganizationLevel <|-- Department
OrganizationLevel::head o-- Administrator
OrganizationLevel::employees o-- Employee


class University {
    +institutes: list[Institute]
    +dormitories: list[Dormitory]
}
University::institutes o-- Institute
University::dormitories o-- Dormitory


class Institute {
    +departments: list[Department]
}
Institute::departments o-- Department


class Dormitory {
    rooms: dict[str, list[Student]]
}
Dormitory::rooms o-- Student


class Department {
    +groups: list[Group]
}
Department::groups o-- Group


abstract class list
hide list empty members
list <|-- Group


class Group {
    +name: str
    +chief: Student
    +curator: Teacher
}
Group o-- Student
Group::curator o-- Teacher


class Student {
    +form: EducationForm
    +contract: Contract
    +year: int
    +speciality: str
    +grant: Decimal
}
Student *-- "сильная" EducationForm
Student *-- "сильная" Contract


class Teacher {
    +courses: list[str]
    +professorship: bool
}


class Researcher


abstract class ProfessionalEmployee {
    +degree: Degree
}
ProfessionalEmployee <|-- Teacher
ProfessionalEmployee <|-- Researcher
ProfessionalEmployee::degree o-- Degree


class Administrator {
    +division: str
    +subordinates: list[Employee]
}
Administrator::subordinates o-- Employee


class GeneralPersonnel


abstract class Employee {
    +hire_date: date
    -prev_experience: int
    +salary: Decimal
    +position: str
    +head: Administrator
    .. properties ..
    +experience
    __
}
Employee <|-- GeneralPersonnel
Employee <|-- ProfessionalEmployee
Employee::head o-- Administrator


abstract class Person {
    +surname: str
    +name: str
    +patronymic: str
    +birthdate: date
    +gender: Gender
    +contact: Contact
}
Person <|-- Student
Person <|-- Employee
Person *-- "сильная" Gender


@enduml